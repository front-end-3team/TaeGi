{"ast":null,"code":"var _jsxFileName = \"/Users/kimtaegi/Desktop/Git_taegi/react/GlobalTest/src/domain/3_redux/components/pages/Q1.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport NavigateButton from \"../../../../components/NavigateButton\";\nimport { MockPosts } from \"../../../../__mock__/mockPosts\";\nimport PostForm from \"../atom/Post/Form\";\nimport AllPosts from \"../atom/Posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReduxQ1Page = () => {\n  _s();\n  /* \n        문제 3\n         1) 이전에 주어졌던 토이프로젝트에 데이터입니다.\n           이제는 우리는 여태까지의 문제풀이를 통해 state와 조금 익숙해지는 시간을 가졌습니다.\n           그렇다면 이제 조금 더 복잡한 데이터를 다뤄보도록 하겠습니다.\n         2) src/__mock__/mockPosts.js에 있는 데이터를 이용하여\n           아래의 AllPosts 컴포넌트를 구현해주세요.\n           구현 기능에는 게시글 추가, 게시글 삭제, 게시글 수정이 있습니다.\n         3) 마찬가지로 각 게시글의 수정, 삭제 버튼를 통해\n           게시글을 수정 및 삭제할 수 있습니다\n         4) 단 이 상태의 변화는 모두 redux를 통해 관리합니다.\n             redux 관련 설정은 admin/src/store.js에 구현해주시면 됩니다.\n            단, 개발자모드, 릴리즈모드에 따라서 redux devtools와 logger를 사용할 수 있도록 해주세요.\n             관련 비즈니스 로직은\n            src/store/4_redux.js에 구현해주세요.\n  */\n\n  const [Posts, setPosts] = useState(MockPosts(10));\n  const onSubmit = e => {\n    console.log(\"submit\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {\n      onSubmit: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AllPosts, {\n      posts: Posts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavigateButton, {\n      isLastPage: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ReduxQ1Page, \"RMrlp5+sC7rIYdLdxNCIPeuXOko=\");\n_c = ReduxQ1Page;\nexport default ReduxQ1Page;\nvar _c;\n$RefreshReg$(_c, \"ReduxQ1Page\");","map":{"version":3,"names":["useState","NavigateButton","MockPosts","PostForm","AllPosts","jsxDEV","_jsxDEV","ReduxQ1Page","_s","Posts","setPosts","onSubmit","e","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","posts","isLastPage","_c","$RefreshReg$"],"sources":["/Users/kimtaegi/Desktop/Git_taegi/react/GlobalTest/src/domain/3_redux/components/pages/Q1.js"],"sourcesContent":["import { useState } from \"react\";\nimport NavigateButton from \"../../../../components/NavigateButton\";\nimport { MockPosts } from \"../../../../__mock__/mockPosts\";\nimport PostForm from \"../atom/Post/Form\";\nimport AllPosts from \"../atom/Posts\";\n\nconst ReduxQ1Page = () => {\n  /* \n        문제 3\n\n        1) 이전에 주어졌던 토이프로젝트에 데이터입니다.\n           이제는 우리는 여태까지의 문제풀이를 통해 state와 조금 익숙해지는 시간을 가졌습니다.\n           그렇다면 이제 조금 더 복잡한 데이터를 다뤄보도록 하겠습니다.\n\n        2) src/__mock__/mockPosts.js에 있는 데이터를 이용하여\n           아래의 AllPosts 컴포넌트를 구현해주세요.\n           구현 기능에는 게시글 추가, 게시글 삭제, 게시글 수정이 있습니다.\n\n        3) 마찬가지로 각 게시글의 수정, 삭제 버튼를 통해\n           게시글을 수정 및 삭제할 수 있습니다\n\n        4) 단 이 상태의 변화는 모두 redux를 통해 관리합니다.\n\n            redux 관련 설정은 admin/src/store.js에 구현해주시면 됩니다.\n            단, 개발자모드, 릴리즈모드에 따라서 redux devtools와 logger를 사용할 수 있도록 해주세요.\n\n            관련 비즈니스 로직은\n            src/store/4_redux.js에 구현해주세요.\n  */\n\n  const [Posts, setPosts] = useState(MockPosts(10));\n  const onSubmit = (e) => {\n    console.log(\"submit\");\n  };\n\n  return (\n    <div>\n      <PostForm onSubmit={onSubmit} />\n      <AllPosts posts={Posts} />\n      <NavigateButton isLastPage />\n    </div>\n  );\n};\nexport default ReduxQ1Page;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,cAAc,MAAM,uCAAuC;AAClE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,OAAOC,QAAQ,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAQE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACE,SAAS,CAAC,EAAE,CAAC,CAAC;EACjD,MAAMS,QAAQ,GAAIC,CAAC,IAAK;IACtBC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACvB,CAAC;EAED,oBACER,OAAA;IAAAS,QAAA,gBACET,OAAA,CAACH,QAAQ;MAACQ,QAAQ,EAAEA;IAAS;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAChCb,OAAA,CAACF,QAAQ;MAACgB,KAAK,EAAEX;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC1Bb,OAAA,CAACL,cAAc;MAACoB,UAAU;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACzB;AAEV,CAAC;AAACX,EAAA,CApCID,WAAW;AAAAe,EAAA,GAAXf,WAAW;AAqCjB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}