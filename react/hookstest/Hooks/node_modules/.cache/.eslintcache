[{"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/index.js":"1","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/App.js":"2","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/reportWebVitals.js":"3","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/pages/Hooks.js":"4","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/pages/Detail.js":"5","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/pages/State.js":"6","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/1.basic/q3.js":"7","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/1.basic/q1.js":"8","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/2.state/state2.js":"9","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/2.state/state3.js":"10","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/2.state/state1.js":"11","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/1.basic/q2.js":"12","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/components/1.basic/q3components.js":"13","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/components/2.state/product.js":"14","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/components/2.state/comment.js":"15"},{"size":543,"mtime":1676825547894,"results":"16","hashOfConfig":"17"},{"size":689,"mtime":1677220764809,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1676150996000,"results":"19","hashOfConfig":"17"},{"size":644,"mtime":1676438834000,"results":"20","hashOfConfig":"17"},{"size":2300,"mtime":1677233196410,"results":"21","hashOfConfig":"17"},{"size":545,"mtime":1676438929000,"results":"22","hashOfConfig":"17"},{"size":1673,"mtime":1677159355285,"results":"23","hashOfConfig":"17"},{"size":2825,"mtime":1676698022483,"results":"24","hashOfConfig":"17"},{"size":5026,"mtime":1677084958903,"results":"25","hashOfConfig":"17"},{"size":2602,"mtime":1677230982806,"results":"26","hashOfConfig":"17"},{"size":1646,"mtime":1677160797768,"results":"27","hashOfConfig":"17"},{"size":2839,"mtime":1676818406793,"results":"28","hashOfConfig":"17"},{"size":440,"mtime":1677163464402,"results":"29","hashOfConfig":"17"},{"size":722,"mtime":1677228688250,"results":"30","hashOfConfig":"17"},{"size":2653,"mtime":1677167256679,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"4g7nm3",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"35"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"35"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"35"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"35"},"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/index.js",[],[],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/App.js",[],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/reportWebVitals.js",[],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/pages/Hooks.js",[],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/pages/Detail.js",["83","84"],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/pages/State.js",[],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/1.basic/q3.js",[],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/1.basic/q1.js",[],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/2.state/state2.js",["85"],[],"import { useRef, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Comment from \"../../components/2.state/comment\";\n\nfunction State2() {\n    /*  \n    문제 2.\n    Q1. 아래 작성된 state의 mock data를 활용하여\n        댓글 목록을 화면에 랜더링 해보세요 :)\n        Components는 src/components/state/comment.js를 활용하세요\n    Q2. 댓글 작성 수정 삭제 기능을 구현해보세요 :)\n            1. 댓글 작성 기능\n            2. 댓글 수정 기능\n            3. 댓글 삭제 기능 ( 본인이 작성한 댓글만 삭제할 수 있습니다, myComment 활용 )\n            */\n\n    const [inputContent, setInputContent] = useState(\"\");\n    const [inputName, setInputName] = useState(\"\");\n\n    //input값 2개 가져오기 (nickname, contents)\n    const inputNickname = (e) => {\n        setInputName(e.target.value);\n    };\n    const inputContents = (e) => {\n        setInputContent(e.target.value);\n    };\n\n    //추가 버튼 클릭\n    const onAddList = () => {\n        const newarr = { ...post };\n        const newContent = {\n            User: {\n                nickname: inputName,\n            },\n            id: post.Comments.length + 1,\n            content: inputContent,\n            myComment: true,\n            change: false,\n        };\n        newarr.Comments.push(newContent);\n        setPost(newarr);\n    };\n\n    //\n    const [post, setPost] = useState({\n        title: \"안녕하세요 여러분 김성용 강사입니다 :)\",\n        content: \"오늘도 모두 화이팅입니다!\",\n        User: {\n            nickname: \"김성용\",\n            age: 20,\n            height: 190,\n        },\n        Comments: [\n            {\n                User: {\n                    nickname: \"김사과\",\n                },\n                id: 1,\n                content: \"오늘도 화이팅입니다!\",\n                myComment: false,\n                change: false,\n            },\n            {\n                User: {\n                    nickname: \"반하나\",\n                },\n                id: 2,\n                content: \"오늘도 화이팅입니다!\",\n                myComment: false,\n                change: false,\n            },\n            {\n                User: {\n                    nickname: \"오렌지\",\n                },\n                id: 3,\n                content: \"오늘도 화이팅입니다!\",\n                myComment: false,\n                change: false,\n            },\n            {\n                User: {\n                    nickname: \"이멜론\",\n                },\n                id: 4,\n                content: \"오늘도 화이팅입니다!\",\n                myComment: false,\n                change: false,\n            },\n            {\n                User: {\n                    nickname: \"박수박\",\n                },\n                id: 5,\n                content: \"오늘도 화이팅입니다!\",\n                myComment: false,\n                change: false,\n            },\n        ],\n    });\n\n    return (\n        <S.Wrapper>\n            <h1>문제2</h1>\n            <S.PostBox>\n                <S.PostTitle>제목: {post.title}</S.PostTitle>\n                <S.PostContent>내용: {post.content}</S.PostContent>\n            </S.PostBox>\n            <S.PostInfo>\n                <p>\n                    작성자: <span>{post.User.nickname}</span>\n                </p>\n                <p>\n                    작성자 나이: <span>{post.User.age}</span>\n                </p>\n                <p>\n                    작성자 키: <span>{post.User.height}</span>\n                </p>\n            </S.PostInfo>\n            <div>\n                <p>\n                    댓글 수: <span>{post.Comments.length}</span>\n                </p>\n                <input placeholder=\"작성자\" onChange={inputNickname} />\n                <input placeholder=\"댓글 내용\" onChange={inputContents} />\n                <button onClick={onAddList}>댓글 작성</button>\n            </div>\n            <S.CommentList>\n                <Comment\n                    post={post.Comments}\n                    setPost={setPost}\n                    realPost={post}\n                />\n            </S.CommentList>\n        </S.Wrapper>\n    );\n}\n\nexport default State2;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst PostBox = styled.div`\n    background-color: #999;\n    width: 360px;\n    padding: 10px;\n`;\n\nconst PostTitle = styled.p`\n    font-size: 20px;\n    font-weight: bold;\n`;\n\nconst PostContent = styled.p`\n    color: #fff;\n`;\n\nconst PostInfo = styled.div`\n    width: 360px;\n    border: 3px solid #f00;\n    padding: 10px;\n    margin: 10px;\n\n    p {\n        display: flex;\n        justify-content: space-around;\n    }\n\n    span {\n        font-weight: bold;\n    }\n`;\n\nconst CommentList = styled.ul`\n    width: 960px;\n`;\n\nconst S = {\n    Wrapper,\n    PostBox,\n    PostTitle,\n    PostContent,\n    PostInfo,\n    CommentList,\n};\n","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/2.state/state3.js",["86","87"],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/2.state/state1.js",["88"],[],"import { useState } from \"react\";\r\n\r\nimport PlayListMock from \"../../__mock__/playList.json\";\r\n\r\nfunction State1() {\r\n    const [list, setList] = useState(PlayListMock.playlist);\r\n    const [title, setTitle] = useState();\r\n    const [singer, setSinger] = useState();\r\n    const [state, setState] = useState(false);\r\n\r\n    const onChangeTitle = (el) => {\r\n        setTitle(el.target.value);\r\n    };\r\n    const onChangeSinger = (el) => {\r\n        setSinger(el.target.value);\r\n    };\r\n    const onClickAddList = (el) => {\r\n        list.push({ title: title, signer: singer });\r\n        setState((prev) => !prev);\r\n    };\r\n    const removeTitle = (title) => {\r\n        setList(list.filter((el) => el.title !== title));\r\n        console.log(title);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <h1>문제1</h1>\r\n            <ul>\r\n                {list.map((el) => (\r\n                    <li>\r\n                        <h3>{el.title}</h3>\r\n                        <p>{el.signer}</p>\r\n                        <button onClick={() => removeTitle(el.title)}>\r\n                            삭제\r\n                        </button>\r\n                        <hr />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div>\r\n                <p>\r\n                    곡명 : <input onChange={onChangeTitle} />\r\n                </p>\r\n                <p>\r\n                    가수/작곡 : <input onChange={onChangeSinger} />\r\n                </p>\r\n                <p>\r\n                    <button onClick={onClickAddList}>추가</button>\r\n                </p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default State1;\r\n","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/hooks/1.basic/q2.js",["89"],[],"import { useRef, useState } from \"react\";\r\n\r\nfunction Q2() {\r\n    const [forceRender, setForceRender] = useState(false);\r\n    const [view, setView] = useState(false);\r\n    const inputChange = useRef();\r\n    const arr = useRef([]);\r\n\r\n    //2-1번\r\n\r\n    const onAddList = () => {\r\n        setForceRender((prev) => !prev);\r\n        arr.current.push({ value: inputChange.current.value });\r\n    };\r\n\r\n    const onMakeList = () => {\r\n        setView(true);\r\n    };\r\n\r\n    //2-2번\r\n    const colorChange = useRef();\r\n\r\n    const onBtnColor = () => {\r\n        colorChange.current.style = \"color : red\";\r\n    };\r\n\r\n    /* \r\n    문제2\r\n\r\n    2-1)\r\n        useRef에 관련한 문제입니다.\r\n\r\n        추가 버튼을 누르면 input에 있던 value는 배열 arr에 추가됩니다.\r\n        그러나, 추가 버튼을 누를 때마다 강제 랜더링 상태가 무조건 적으로 업데이트 됩니다.\r\n\r\n        이러한 상황에서 제출버튼을 누르면\r\n        \r\n        지금까지 추가하였던 목록 배열(arr)이 \r\n        <ul>의 li의 항목으로 추가되어야합니다.\r\n\r\n        만약 제출되었을 때 아무런 항목이 없다면\r\n        <p>제출된 목록이 없습니다</p>이 노출되어야하며\r\n\r\n        제출된 항목이 있다면\r\n        <ul>만 노출되어야 합니다\r\n\r\n        이를 useRef의 특성을 고려하여 풀이해보세요 :)\r\n\r\n    2-2)\r\n        문제 2-2는 변경 버튼을 클릭하면\r\n        p태그의 색상이 다른 색상으로 변경됩니다.\r\n        \r\n        이는 satet를 사용하는 것이 가장 올바른 방법이지만\r\n        어를 사용할 수 없는 어쩔 수 없는 상황에 놓여있습니다.\r\n\r\n        따라서 useRef는 사용하여 해당 문구의 색상을 변경해보세요 :)\r\n  */\r\n\r\n    return (\r\n        <>\r\n            <h1>문제2</h1>\r\n            <div>\r\n                <h2>문제 2-1</h2>\r\n                <p>\r\n                    <input ref={inputChange} />\r\n                </p>\r\n\r\n                <p>\r\n                    <button onClick={onAddList}>추가</button>\r\n                </p>\r\n                <p>\r\n                    <button onClick={onMakeList}>제출</button>\r\n                </p>\r\n                <ul>\r\n                    {view ? (\r\n                        arr.current.map((el) => <li>{el.value}</li>)\r\n                    ) : (\r\n                        <p>제출된 목록이 없습니다</p>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div>\r\n                <h2>문제 2-2</h2>\r\n                <p ref={colorChange}>\r\n                    이 문구는 아래 버튼을 누르면 색상이 바뀝니다\r\n                </p>\r\n                <button onClick={onBtnColor}>변경</button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default Q2;\r\n","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/components/1.basic/q3components.js",["90"],[],"import { useEffect } from \"react\";\r\n\r\nfunction Q3components({ count, setCount }) {\r\n    useEffect(() => {\r\n        const total = setInterval(() => {\r\n            setCount((count += 1));\r\n            console.log(\"aa\");\r\n        }, 2000);\r\n        return () => {\r\n            clearInterval(total);\r\n            setCount(0);\r\n        };\r\n    }, []);\r\n\r\n    return <div>🏃‍♂️ 줄넘기 ... ing </div>;\r\n}\r\nexport default Q3components;\r\n","/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/components/2.state/product.js",["91"],[],"/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/components/2.state/comment.js",["92"],[],"import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nfunction Comment({ post, setPost, realPost, taek }) {\n    //삭제\n    const [realContent, setRealContent] = useState(\"\");\n\n    const oncontent = (e) => {\n        setRealContent(e.target.value);\n    };\n\n    const deleteBtn = (el) => {\n        window.confirm(\"정말 삭제 하시겠습니까?\");\n        {\n            if (el.myComment === false) return alert(\"XXX 삭제 불가 XXX\");\n            setPost((prev) => ({\n                ...prev,\n                Comments: [\n                    ...prev.Comments.filter(\n                        (e) => e.User.nickname !== el.User.nickname\n                    ),\n                ],\n            }));\n        }\n    };\n\n    const ChangeBtn = (el) => {\n        if (!el.myComment) return alert(\"XXX 변경 불가 XXX\");\n        //이거는 수정 눌렀을때\n        if (el.change) {\n            //이거 change 변경 후\n            const newPost = { ...realPost };\n            const comment = newPost.Comments.find(\n                (comment) => comment.id === el.id\n            );\n            comment.change = false;\n            comment.content = realContent;\n            setPost(newPost);\n\n            //이거 content 변경 전\n        } else {\n            const newPost = { ...realPost };\n            const comment = newPost.Comments.find(\n                (comment) => comment.id === el.id\n            );\n            comment.change = true;\n            setPost(newPost);\n        }\n    };\n\n    //수정\n\n    return (\n        <S.CommentItem>\n            {realPost.Comments.map((el) => (\n                <>\n                    <p>\n                        작성자: <span>{el.User.nickname}</span>\n                    </p>\n                    {el.change ? (\n                        <input\n                            placeholder=\"수정할 댓글 내용\"\n                            onChange={oncontent}\n                        />\n                    ) : (\n                        <p>\n                            댓글 내용: <span>{el.content}</span>\n                        </p>\n                    )}\n\n                    <button onClick={() => deleteBtn(el)}>삭제</button>\n                    {el.change ? (\n                        <button onClick={() => ChangeBtn(el)}>수정완료</button>\n                    ) : (\n                        <button onClick={() => ChangeBtn(el)}>수정</button>\n                    )}\n                </>\n            ))}\n        </S.CommentItem>\n    );\n}\nexport default Comment;\n\nconst CommentItem = styled.li`\n    border: 1px solid #000;\n    margin: 10px;\n`;\n\nconst S = {\n    CommentItem,\n};\n",{"ruleId":"93","severity":1,"message":"94","line":1,"column":10,"nodeType":"95","messageId":"96","endLine":1,"endColumn":19},{"ruleId":"93","severity":1,"message":"97","line":6,"column":18,"nodeType":"95","messageId":"96","endLine":6,"endColumn":25},{"ruleId":"93","severity":1,"message":"98","line":1,"column":10,"nodeType":"95","messageId":"96","endLine":1,"endColumn":16},{"ruleId":"93","severity":1,"message":"99","line":42,"column":26,"nodeType":"95","messageId":"96","endLine":42,"endColumn":41},{"ruleId":"93","severity":1,"message":"100","line":76,"column":7,"nodeType":"95","messageId":"96","endLine":76,"endColumn":8},{"ruleId":"93","severity":1,"message":"101","line":9,"column":12,"nodeType":"95","messageId":"96","endLine":9,"endColumn":17},{"ruleId":"93","severity":1,"message":"102","line":4,"column":12,"nodeType":"95","messageId":"96","endLine":4,"endColumn":23},{"ruleId":"103","severity":1,"message":"104","line":6,"column":32,"nodeType":"105","endLine":6,"endColumn":33},{"ruleId":"93","severity":1,"message":"106","line":1,"column":18,"nodeType":"95","messageId":"96","endLine":1,"endColumn":35},{"ruleId":"107","severity":1,"message":"108","line":14,"column":9,"nodeType":"109","messageId":"110","endLine":24,"endColumn":10},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setData' is assigned a value but never used.","'useRef' is defined but never used.","'setProductLists' is assigned a value but never used.","'S' is assigned a value but never used.","'state' is assigned a value but never used.","'forceRender' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'count' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'createGlobalStyle' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock"]