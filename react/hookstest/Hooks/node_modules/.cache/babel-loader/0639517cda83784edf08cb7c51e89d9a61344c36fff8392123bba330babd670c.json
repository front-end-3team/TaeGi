{"ast":null,"code":"var _s = $RefreshSig$();\n// import { normalizeSearch } from \"@remix-run/router/dist/utils\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport productList from \"../__mock__/products.json\";\nfunction DetailPage() {\n  _s();\n  const params = useParams();\n  const {\n    productNumber\n  } = params;\n\n  //이건 잘못찾아갔을때 다시 경로 설정을 위해서\n  const navigate = useNavigate();\n  const inputReviewer = useRef();\n  const inputReview = useRef();\n  const inputRating = useRef();\n\n  //Review를 state관리\n  const [newarr, setNewarr] = useState();\n  useEffect(() => {\n    setNewarr(productList.products.find(el => el.productNumber === productNumber));\n  }, []);\n  console.log(newarr);\n  //pushBtn\n  const onAddReview = () => {\n    setNewarr(prev => ({\n      ...prev,\n      Review: [{\n        reviwer: inputReviewer.current.value,\n        review: inputReview.current.value,\n        rating: inputRating.current.value\n      }]\n    }));\n  };\n\n  //아래 코드하면 newarr.productNumber를 찾을수 없음.......\n  // if (newarr.productNumber === productNumber) return navigate(\"/\");\n\n  const [data, setData] = useState(productList.products);\n  return {\n    // data.\n  };\n\n  /* 상세 페이지는 자유롭게 꾸미시면 됩니다. 아직 해당 부분의 진도가\r\n          나가지 않았기 때문에 주소의 파람을 가지고 올 수 있는 방법은 미리\r\n          콘솔에 찍어두었습니다. 단, 없는 번호 상품으로 접근 시 state페이지로\r\n          돌아가도록 구현해주세요 */\n\n  // <div>\n  //         <h4>{list.productName}</h4>\n  //         <p>상품번호: {list.productNumber}</p>\n  //         <p>가격: {Number(list.productPrice).toLocaleString()}원</p>\n  //         <p>사이즈: {list.productSize}</p>\n  //         <p>평점: {list.productRating}</p>\n  //         <p>리뷰: {list.productReview}</p>\n  //     </div>\n}\n_s(DetailPage, \"Wx8k4z+5NvDBNO2C3/47huVBnh0=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = DetailPage;\nexport default DetailPage;\nvar _c;\n$RefreshReg$(_c, \"DetailPage\");","map":{"version":3,"names":["useEffect","useRef","useState","useNavigate","useParams","productList","DetailPage","params","productNumber","navigate","inputReviewer","inputReview","inputRating","newarr","setNewarr","products","find","el","console","log","onAddReview","prev","Review","reviwer","current","value","review","rating","data","setData"],"sources":["/Users/kimtaegi/Desktop/Git_taegi/react/hookstest/Hooks/src/pages/Detail.js"],"sourcesContent":["// import { normalizeSearch } from \"@remix-run/router/dist/utils\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport productList from \"../__mock__/products.json\";\r\n\r\nfunction DetailPage() {\r\n    const params = useParams();\r\n    const { productNumber } = params;\r\n\r\n    //이건 잘못찾아갔을때 다시 경로 설정을 위해서\r\n    const navigate = useNavigate();\r\n\r\n    const inputReviewer = useRef();\r\n    const inputReview = useRef();\r\n    const inputRating = useRef();\r\n\r\n    //Review를 state관리\r\n    const [newarr, setNewarr] = useState();\r\n\r\n    useEffect(() => {\r\n        setNewarr(\r\n            productList.products.find(\r\n                (el) => el.productNumber === productNumber\r\n            )\r\n        );\r\n    }, []);\r\n    console.log(newarr);\r\n    //pushBtn\r\n    const onAddReview = () => {\r\n        setNewarr((prev) => ({\r\n            ...prev,\r\n            Review: [\r\n                {\r\n                    reviwer: inputReviewer.current.value,\r\n                    review: inputReview.current.value,\r\n                    rating: inputRating.current.value,\r\n                },\r\n            ],\r\n        }));\r\n    };\r\n\r\n    //아래 코드하면 newarr.productNumber를 찾을수 없음.......\r\n    // if (newarr.productNumber === productNumber) return navigate(\"/\");\r\n\r\n    const [data, setData] = useState(productList.products);\r\n\r\n    return {\r\n        // data.\r\n    };\r\n\r\n    /* 상세 페이지는 자유롭게 꾸미시면 됩니다. 아직 해당 부분의 진도가\r\n            나가지 않았기 때문에 주소의 파람을 가지고 올 수 있는 방법은 미리\r\n            콘솔에 찍어두었습니다. 단, 없는 번호 상품으로 접근 시 state페이지로\r\n            돌아가도록 구현해주세요 */\r\n\r\n    // <div>\r\n    //         <h4>{list.productName}</h4>\r\n    //         <p>상품번호: {list.productNumber}</p>\r\n    //         <p>가격: {Number(list.productPrice).toLocaleString()}원</p>\r\n    //         <p>사이즈: {list.productSize}</p>\r\n    //         <p>평점: {list.productRating}</p>\r\n    //         <p>리뷰: {list.productReview}</p>\r\n    //     </div>\r\n}\r\nexport default DetailPage;\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,WAAW,MAAM,2BAA2B;AAEnD,SAASC,UAAU,GAAG;EAAA;EAClB,MAAMC,MAAM,GAAGH,SAAS,EAAE;EAC1B,MAAM;IAAEI;EAAc,CAAC,GAAGD,MAAM;;EAEhC;EACA,MAAME,QAAQ,GAAGN,WAAW,EAAE;EAE9B,MAAMO,aAAa,GAAGT,MAAM,EAAE;EAC9B,MAAMU,WAAW,GAAGV,MAAM,EAAE;EAC5B,MAAMW,WAAW,GAAGX,MAAM,EAAE;;EAE5B;EACA,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,EAAE;EAEtCF,SAAS,CAAC,MAAM;IACZc,SAAS,CACLT,WAAW,CAACU,QAAQ,CAACC,IAAI,CACpBC,EAAE,IAAKA,EAAE,CAACT,aAAa,KAAKA,aAAa,CAC7C,CACJ;EACL,CAAC,EAAE,EAAE,CAAC;EACNU,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;EACnB;EACA,MAAMO,WAAW,GAAG,MAAM;IACtBN,SAAS,CAAEO,IAAI,KAAM;MACjB,GAAGA,IAAI;MACPC,MAAM,EAAE,CACJ;QACIC,OAAO,EAAEb,aAAa,CAACc,OAAO,CAACC,KAAK;QACpCC,MAAM,EAAEf,WAAW,CAACa,OAAO,CAACC,KAAK;QACjCE,MAAM,EAAEf,WAAW,CAACY,OAAO,CAACC;MAChC,CAAC;IAET,CAAC,CAAC,CAAC;EACP,CAAC;;EAED;EACA;;EAEA,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAG3B,QAAQ,CAACG,WAAW,CAACU,QAAQ,CAAC;EAEtD,OAAO;IACH;EAAA,CACH;;EAED;AACJ;AACA;AACA;;EAEI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAAC,GA1DQT,UAAU;EAAA,QACAF,SAAS,EAIPD,WAAW;AAAA;AAAA,KALvBG,UAAU;AA2DnB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}