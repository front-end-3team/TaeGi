React?
    컴포넌트 구조이다 즉 쪼개는 구조
    virtual DOM을 통해 상태를 비교해 변경에 필요한 최소한의 변경 사항만 실제 DOM에 반영해
    효율성과 속도를 개선할수있다.

----------------------------------------------------------------------------------------------------------

React의 JS 구동원리 핵심 컨셉

Components
- 하나의 페이지를 한 가지 이상의 기능을 수행하는 UI 단위로 분리한 것
- 재사용이 용이하고 관리 및 유지 보수에 효율적
- 즉 독립적며 재사용 할수있는 부품을 만든다라고 생각하면 될듯하다.

Virtual DOM
- react가 가지고 있는 가상 돔, 돔의 복사본
- state(상태)를 react에서 구독, 만약 state의 변화가 생긴다면 그 때 
  가상돔과 실제돔을 비교하여 수정된 부분만을 실제 돔에 리랜더링
- 즉 리액트는 원본DOM을 다루기에는 무겁다. 그래서 가상DOM은 변경 부분만 바뀔수있는 DOM의 요약본이다.

1. state의 변화가 생긴다면
2. 수정된 부분(컴포넌트)만을 실제 돔에 리랜더링
(...랜더링 최적화)


key point

state(상태, 값)
Components(UI 분리)
Virtual DOM(re 랜더링)

-------------------------------------------------------------------------------

CSR, SSR


CSR (Client Side Rendering)
    * 사용자가 웹 페이지 그린다
    사용자가 웹 페이지 접속 -> 프론트엔드 서버에 페이지를 랜더링할 때 필요한 리소스 전달

    ex) 페이지가 로드 되었을 때 상품 목록을 그려준다.
        이 상품 목록은 백엔드 서버로부터 응답 받은 데이터이다.

    위의 과정을 사용자가 하게되는 것
    사용자가 랜더링을 부담

    장점
        페이지에 필요한 리소스들을 사전에 미리 불러와 데이터를 캐싱(저장)하고 있다가
        URL에 맞는 페이지를 보여주기 때문에 초기 랜더링 이후의 랜더링 속도가 빠르다

    단점
        초기 페이지 로딩이 SSR보다 느리다.
        SEO(검색엔진최적화)에 불리
        검색엔진에 노출이 필요한 사이트 부적합 ( 페이지가 검색엔진이 검색하였을 때 빈화면이 노출 )


SSR (Server Side Rendering)
    * 서버에서 페이지를 그린다
    사용자가 웹 페이지에 접속 -> 서버에서 페이지를 랜더링 -> 랜더링된 페이지를 사용자에게 전달
    js가 로드 되기도 전에 완성된 페이지를 사용자가 먼저 확인

    장점
        SEO 유리 => 웹 사이트를 검색엔진이 크롤링하여 사용자에 제공 가능
        빠른 완성본 페이지 로딩 속도
        서버에서 랜더링을 부담하기 때문에 사용자가 느끼는 부담이 덜하다
    
    단점
        서버의 부담 (생산 비용 증가)
        무거운 페이지라면 오히려 초기 로딩이 CSR보다 오래 걸릴 가능성
        CSR보다 더 많은 생산비용, 추가 러닝 커브

React는 대표적인 CSR, SPA

-------------------------------------------------------------------------------

SPA, MPA

    SPA (Single Page Application)

        페이지 하나인 애플리케이션(.html 파일이 1개)
        reactJS와 같은 컴포넌트 기반 라이브러리 및 프레임워크는 SPA에 최적화
        사용자가 웹 사이트에 접속 당시 번들링 된 리소스들을 한번에 전달

        그리고 이를 캐싱해두었다가 url이 달라짐에 따라 html의 내부를 수정하여
        사용자에게 보내주는 것

        따라서 통상적으로 react의 파일 구조는 index.html 하나로만 구성되어 있음

    MPA (Multi Page Application)

        페이지가 여러개인 애플리케이션 (.html 파일이 여러개)
        보통은 SSR 방식으로 요청마다 해당 페이지에 필요한 리소스를 불러온다.

-------------------------------------------------------------------------------

 * REACT는 CSR에 SPA에 최적화 되어있다.

-------------------------------------------------------------------------------

re-Rendering되는 조건
    1. state가 변경될 때
    2. 부모 컴포넌트가 리렌더링 될 때
    3. 자신이 전달받은 props가 변경될 때
    4. forceUpdate 함수가 실행될 때

forceUpdate()메서드를 통해 리랜더링 할수있다.
하지만 react개발자라면 forceUpdate()를 최후의 수단으로 사용해야한다.
랜더함수는 props 혹은 state에서만 읽어야한다. 이걸 따라야 효율을 보장할수 있는것이다.

강제로 리랜더링하는 방법
    useState(), useReducer

--------------------------------------------------------------------------------

번들링()
묶어주는것이다.

번들링이 무조건 좋은것은 아니다. 파일이 커지면 번들도 커진다.

코드 분할 (Code-Splitting)
    - 번들이 거대해지는것을 방지
    - 앱 코드 크기를 줄이지않지만, 사용자가 필요하지 않은 코드를 불러오지 않게함
    (앱의 초기화 로딩에 필요한 비용을 줄인다.)

--------------------------------------------------------------------------------

웹팩 (webpack)이란?

    리액트 특성상 컴포넌트로 쪼개져있는것을 다시 불러올때 무작정 import를 때려서 다 불러올수도있지만
    좀 더 편하게 웹팩을 통해서 불러올수있다.
    모듈 번들러이다.
    규모있는 프로젝트를 하면 여러개의 파일을 브라우저에서 로딩하는것은 네트워크 비용이 그만큼 올라가 반응이 느려진다.
    이를 해결하기위해 여러파일을 하나의 파일로 번들링 해주는 역할을 웹펙이라고 한다.

--------------------------------------------------------------------------------

고차함수

.foreach() => 오직 배열에서만 사용이 가능하다. 
              콜백함수는 3가지 인수를 받을수 있다. (currentValue,index,array)
              for문으로 돌릴수 있는거는 foreach로도 가능하다.
.map()     => 
.foreach()랑 .map() 차이점 => .foreach는 return 즉 반환값이 없다. for문 밖으로 값을 쓰지 못하는것이다.
                             하지만 map은 반환값이 있어서, 구문 밖에서도 사용할수있는것이다.
.filter() => 배열에서 조건을 통해서 return을 배열형식으로 반환한다.
.find() => 배열의 특정값 찾기. 찾은 첫번째 값을 num형태로 return한다. 
           장점으로는 속도가 빠르다. 찾는놈을 찾으면 바로 종료. 하지만 한명만 가능하다는 점이다.
           filter인 경우는 전체를 다 확인해야한다.
.findIndex() => .find랑 사용법은 동일하다고 보고 찾은 값의 index번호를 return한다. 그리고 찾는 값이 없으면 -1 return한다.
.reduce() =>  

--------------------------------------------------------------------------------

구조분해할당
배열의 구조 분해할당
let arr = [1,2];
let [a,b] = [1,2];

--------------------------------------------------------------------------------

import React from "react";

const MyComponent = () => {
  return <div>테스트 페이지</div>;
};

export default MyComponent; //export는 다른파일에서 import MyComponent를 불러올수 있도록 정의해주는것이다.
